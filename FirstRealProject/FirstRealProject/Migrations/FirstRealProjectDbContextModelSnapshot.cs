// <auto-generated />
using System;
using FirstRealProject.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace FirstRealProject.Migrations
{
    [DbContext(typeof(FirstRealProjectDbContext))]
    partial class FirstRealProjectDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("FirstRealProject.Models.Accounts.AppRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("FirstRealProject.Models.Accounts.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("FirstRealProject.Models.Commons.AnnounceType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(225);

                    b.Property<DateTime?>("EndDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(225);

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(15,2)");

                    b.Property<DateTime>("StartDate");

                    b.HasKey("Id");

                    b.ToTable("AnnounceTypes","common");
                });

            modelBuilder.Entity("FirstRealProject.Models.Commons.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("CheckIn");

                    b.Property<DateTime?>("CheckInDate");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(225);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(225);

                    b.Property<DateTime>("SendDate");

                    b.HasKey("Id");

                    b.ToTable("Comments","common");
                });

            modelBuilder.Entity("FirstRealProject.Models.Commons.PaymentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(225);

                    b.HasKey("Id");

                    b.ToTable("PaymentTypes","common");
                });

            modelBuilder.Entity("FirstRealProject.Models.Commons.PersonType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(225);

                    b.HasKey("Id");

                    b.ToTable("PersonTypes","common");
                });

            modelBuilder.Entity("FirstRealProject.Models.Commons.Static", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("PinCode");

                    b.HasKey("Id");

                    b.ToTable("Statics");
                });

            modelBuilder.Entity("FirstRealProject.Models.Jobs.ForBusinessModels.BusinessEPhoto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BusinessEquipmentId");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasMaxLength(225);

                    b.HasKey("Id");

                    b.HasIndex("BusinessEquipmentId");

                    b.ToTable("BusinessEPhotos","jobs");
                });

            modelBuilder.Entity("FirstRealProject.Models.Jobs.ForBusinessModels.BusinessEquipment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AnnounceAddedDate");

                    b.Property<bool>("AnnounceCheckIn");

                    b.Property<bool>("AnnounceEnded");

                    b.Property<DateTime?>("AnnounceEndedDate");

                    b.Property<string>("AnnounceName")
                        .IsRequired()
                        .HasMaxLength(225);

                    b.Property<string>("AnnouncePinCode")
                        .HasMaxLength(225);

                    b.Property<DateTime?>("AnnouncePublishDate");

                    b.Property<bool>("AnnouncePublished");

                    b.Property<int?>("AnnounceTypeId");

                    b.Property<string>("AnnounceUniqueCode")
                        .HasMaxLength(225);

                    b.Property<int>("AnnounceViewCount");

                    b.Property<string>("AppUserId");

                    b.Property<bool>("AppendedPinCode");

                    b.Property<int>("BusinessTypeId");

                    b.Property<int>("CityId");

                    b.Property<string>("Description")
                        .HasMaxLength(500);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(225);

                    b.Property<int?>("PaymentTypeId");

                    b.Property<int>("PersonTypeId");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(225);

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(15,2)");

                    b.HasKey("Id");

                    b.HasIndex("AnnounceTypeId");

                    b.HasIndex("AppUserId");

                    b.HasIndex("BusinessTypeId");

                    b.HasIndex("CityId");

                    b.HasIndex("PaymentTypeId");

                    b.HasIndex("PersonTypeId");

                    b.ToTable("BusinessEquipments","jobs");
                });

            modelBuilder.Entity("FirstRealProject.Models.Jobs.ForBusinessModels.BusinessType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(225);

                    b.HasKey("Id");

                    b.ToTable("BusinessTypes","jobs");
                });

            modelBuilder.Entity("FirstRealProject.Models.Jobs.ForFoodModels.Food", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AnnounceAddedDate");

                    b.Property<bool>("AnnounceCheckIn");

                    b.Property<bool>("AnnounceEnded");

                    b.Property<DateTime?>("AnnounceEndedDate");

                    b.Property<string>("AnnounceName")
                        .IsRequired()
                        .HasMaxLength(225);

                    b.Property<string>("AnnouncePinCode")
                        .HasMaxLength(225);

                    b.Property<DateTime?>("AnnouncePublishDate");

                    b.Property<bool>("AnnouncePublished");

                    b.Property<int?>("AnnounceTypeId");

                    b.Property<string>("AnnounceUniqueCode")
                        .HasMaxLength(225);

                    b.Property<int>("AnnounceViewCount");

                    b.Property<string>("AppUserId");

                    b.Property<bool>("AppendedPinCode");

                    b.Property<int>("CityId");

                    b.Property<string>("Description")
                        .HasMaxLength(500);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(225);

                    b.Property<int?>("PaymentTypeId");

                    b.Property<int>("PersonTypeId");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(225);

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(15,2)");

                    b.HasKey("Id");

                    b.HasIndex("AnnounceTypeId");

                    b.HasIndex("AppUserId");

                    b.HasIndex("CityId");

                    b.HasIndex("PaymentTypeId");

                    b.HasIndex("PersonTypeId");

                    b.ToTable("Foods","jobs");
                });

            modelBuilder.Entity("FirstRealProject.Models.Jobs.ForFoodModels.FoodPhoto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FoodId");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasMaxLength(225);

                    b.HasKey("Id");

                    b.HasIndex("FoodId");

                    b.ToTable("FoodPhotos","jobs");
                });

            modelBuilder.Entity("FirstRealProject.Models.Jobs.ForJob.ActivityArea", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(225);

                    b.HasKey("Id");

                    b.ToTable("ActivityAreas","jobs");
                });

            modelBuilder.Entity("FirstRealProject.Models.Jobs.ForJob.Job", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ActivityAreaId");

                    b.Property<DateTime>("AnnounceAddedDate");

                    b.Property<bool>("AnnounceCheckIn");

                    b.Property<bool>("AnnounceEnded");

                    b.Property<DateTime?>("AnnounceEndedDate");

                    b.Property<string>("AnnounceName")
                        .IsRequired()
                        .HasMaxLength(225);

                    b.Property<string>("AnnouncePinCode")
                        .HasMaxLength(225);

                    b.Property<DateTime?>("AnnouncePublishDate");

                    b.Property<bool>("AnnouncePublished");

                    b.Property<int?>("AnnounceTypeId");

                    b.Property<string>("AnnounceUniqueCode")
                        .HasMaxLength(225);

                    b.Property<int>("AnnounceViewCount");

                    b.Property<string>("AppUserId");

                    b.Property<bool>("AppendedPinCode");

                    b.Property<int>("CityId");

                    b.Property<string>("Description")
                        .HasMaxLength(500);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(225);

                    b.Property<int>("JobTypeId");

                    b.Property<int?>("PaymentTypeId");

                    b.Property<int>("PersonTypeId");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(225);

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(15,2)");

                    b.HasKey("Id");

                    b.HasIndex("ActivityAreaId");

                    b.HasIndex("AnnounceTypeId");

                    b.HasIndex("AppUserId");

                    b.HasIndex("CityId");

                    b.HasIndex("JobTypeId");

                    b.HasIndex("PaymentTypeId");

                    b.HasIndex("PersonTypeId");

                    b.ToTable("Jobs","jobs");
                });

            modelBuilder.Entity("FirstRealProject.Models.Jobs.ForJob.JobType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(225);

                    b.HasKey("Id");

                    b.ToTable("JobTypes","jobs");
                });

            modelBuilder.Entity("FirstRealProject.Models.Jobs.ForJobModels.JobPhoto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("JobId");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasMaxLength(225);

                    b.HasKey("Id");

                    b.HasIndex("JobId");

                    b.ToTable("JobPhotos","jobs");
                });

            modelBuilder.Entity("FirstRealProject.Models.PagesModels.BasicMenu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(225);

                    b.HasKey("Id");

                    b.ToTable("BasicMenus","page");
                });

            modelBuilder.Entity("FirstRealProject.Models.PagesModels.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(225);

                    b.Property<int>("BasicMenuId");

                    b.Property<string>("Controller")
                        .IsRequired()
                        .HasMaxLength(225);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(225);

                    b.HasKey("Id");

                    b.HasIndex("BasicMenuId");

                    b.ToTable("Categories","page");
                });

            modelBuilder.Entity("FirstRealProject.Models.PagesModels.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(225);

                    b.HasKey("Id");

                    b.ToTable("Cities","page");
                });

            modelBuilder.Entity("FirstRealProject.Models.Real_Estates.ApartmentModels.Apartment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AnnounceAddedDate");

                    b.Property<bool>("AnnounceCheckIn");

                    b.Property<bool>("AnnounceEnded");

                    b.Property<DateTime?>("AnnounceEndedDate");

                    b.Property<string>("AnnounceName")
                        .IsRequired()
                        .HasMaxLength(225);

                    b.Property<string>("AnnouncePinCode")
                        .HasMaxLength(225);

                    b.Property<DateTime?>("AnnouncePublishDate");

                    b.Property<bool>("AnnouncePublished");

                    b.Property<int?>("AnnounceTypeId");

                    b.Property<string>("AnnounceUniqueCode")
                        .HasMaxLength(225);

                    b.Property<int>("AnnounceViewCount");

                    b.Property<string>("ApartamentLocation")
                        .IsRequired();

                    b.Property<int>("ApartmentTypeId");

                    b.Property<string>("AppUserId");

                    b.Property<bool>("AppendedPinCode");

                    b.Property<decimal>("Area")
                        .HasColumnType("decimal(15,2)");

                    b.Property<int>("CityId");

                    b.Property<string>("Description")
                        .HasMaxLength(500);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(225);

                    b.Property<int?>("PaymentTypeId");

                    b.Property<int>("PersonTypeId");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(225);

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(15,2)");

                    b.Property<int>("RSAnnounceTypeId");

                    b.Property<byte>("RoomCount");

                    b.HasKey("Id");

                    b.HasIndex("AnnounceTypeId");

                    b.HasIndex("ApartmentTypeId");

                    b.HasIndex("AppUserId");

                    b.HasIndex("CityId");

                    b.HasIndex("PaymentTypeId");

                    b.HasIndex("PersonTypeId");

                    b.HasIndex("RSAnnounceTypeId");

                    b.ToTable("Apartments","real_estate");
                });

            modelBuilder.Entity("FirstRealProject.Models.Real_Estates.ApartmentModels.ApartmentPhoto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ApartmentId");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasMaxLength(225);

                    b.HasKey("Id");

                    b.HasIndex("ApartmentId");

                    b.ToTable("ApartmentPhotos","real_estate");
                });

            modelBuilder.Entity("FirstRealProject.Models.Real_Estates.ApartmentModels.ApartmentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(225);

                    b.HasKey("Id");

                    b.ToTable("ApartmentTypes","real_estate");
                });

            modelBuilder.Entity("FirstRealProject.Models.Real_Estates.Commons.RSAnnounceType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(225);

                    b.HasKey("Id");

                    b.ToTable("RSAnnounceTypes","real_estate");
                });

            modelBuilder.Entity("FirstRealProject.Models.Real_Estates.GarageModels.Garage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AnnounceAddedDate");

                    b.Property<bool>("AnnounceCheckIn");

                    b.Property<bool>("AnnounceEnded");

                    b.Property<DateTime?>("AnnounceEndedDate");

                    b.Property<string>("AnnounceName")
                        .IsRequired()
                        .HasMaxLength(225);

                    b.Property<string>("AnnouncePinCode")
                        .HasMaxLength(225);

                    b.Property<DateTime?>("AnnouncePublishDate");

                    b.Property<bool>("AnnouncePublished");

                    b.Property<int?>("AnnounceTypeId");

                    b.Property<string>("AnnounceUniqueCode")
                        .HasMaxLength(225);

                    b.Property<int>("AnnounceViewCount");

                    b.Property<string>("AppUserId");

                    b.Property<bool>("AppendedPinCode");

                    b.Property<decimal>("Area")
                        .HasColumnType("decimal(15,2)");

                    b.Property<int>("CityId");

                    b.Property<string>("Description")
                        .HasMaxLength(500);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(225);

                    b.Property<string>("GarageLocation")
                        .IsRequired();

                    b.Property<int?>("PaymentTypeId");

                    b.Property<int>("PersonTypeId");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(225);

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(15,2)");

                    b.HasKey("Id");

                    b.HasIndex("AnnounceTypeId");

                    b.HasIndex("AppUserId");

                    b.HasIndex("CityId");

                    b.HasIndex("PaymentTypeId");

                    b.HasIndex("PersonTypeId");

                    b.ToTable("Garages","real_estate");
                });

            modelBuilder.Entity("FirstRealProject.Models.Real_Estates.GarageModels.GaragePhoto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("GarageId");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasMaxLength(225);

                    b.HasKey("Id");

                    b.HasIndex("GarageId");

                    b.ToTable("GaragePhotos","real_estate");
                });

            modelBuilder.Entity("FirstRealProject.Models.Real_Estates.HouseModels.House", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AnnounceAddedDate");

                    b.Property<bool>("AnnounceCheckIn");

                    b.Property<bool>("AnnounceEnded");

                    b.Property<DateTime?>("AnnounceEndedDate");

                    b.Property<string>("AnnounceName")
                        .IsRequired()
                        .HasMaxLength(225);

                    b.Property<string>("AnnouncePinCode")
                        .HasMaxLength(225);

                    b.Property<DateTime?>("AnnouncePublishDate");

                    b.Property<bool>("AnnouncePublished");

                    b.Property<int?>("AnnounceTypeId");

                    b.Property<string>("AnnounceUniqueCode")
                        .HasMaxLength(225);

                    b.Property<int>("AnnounceViewCount");

                    b.Property<string>("AppUserId");

                    b.Property<bool>("AppendedPinCode");

                    b.Property<decimal>("Area")
                        .HasColumnType("decimal(15,2)");

                    b.Property<int>("CityId");

                    b.Property<string>("Description")
                        .HasMaxLength(500);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(225);

                    b.Property<string>("HouseLocation")
                        .IsRequired();

                    b.Property<int>("HouseTypeId");

                    b.Property<int?>("PaymentTypeId");

                    b.Property<int>("PersonTypeId");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(225);

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(15,2)");

                    b.Property<int>("RSAnnounceTypeId");

                    b.HasKey("Id");

                    b.HasIndex("AnnounceTypeId");

                    b.HasIndex("AppUserId");

                    b.HasIndex("CityId");

                    b.HasIndex("HouseTypeId");

                    b.HasIndex("PaymentTypeId");

                    b.HasIndex("PersonTypeId");

                    b.HasIndex("RSAnnounceTypeId");

                    b.ToTable("Houses","real_estate");
                });

            modelBuilder.Entity("FirstRealProject.Models.Real_Estates.HouseModels.HousePhoto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("HouseId");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasMaxLength(225);

                    b.HasKey("Id");

                    b.HasIndex("HouseId");

                    b.ToTable("HousePhotos","real_estate");
                });

            modelBuilder.Entity("FirstRealProject.Models.Real_Estates.HouseModels.HouseType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(225);

                    b.HasKey("Id");

                    b.ToTable("HouseTypes","real_estate");
                });

            modelBuilder.Entity("FirstRealProject.Models.Real_Estates.LandModels.Land", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AnnounceAddedDate");

                    b.Property<bool>("AnnounceCheckIn");

                    b.Property<bool>("AnnounceEnded");

                    b.Property<DateTime?>("AnnounceEndedDate");

                    b.Property<string>("AnnounceName")
                        .IsRequired()
                        .HasMaxLength(225);

                    b.Property<string>("AnnouncePinCode")
                        .HasMaxLength(225);

                    b.Property<DateTime?>("AnnouncePublishDate");

                    b.Property<bool>("AnnouncePublished");

                    b.Property<int?>("AnnounceTypeId");

                    b.Property<string>("AnnounceUniqueCode")
                        .HasMaxLength(225);

                    b.Property<int>("AnnounceViewCount");

                    b.Property<string>("AppUserId");

                    b.Property<bool>("AppendedPinCode");

                    b.Property<decimal>("Area")
                        .HasColumnType("decimal(15,2)");

                    b.Property<int>("CityId");

                    b.Property<string>("Description")
                        .HasMaxLength(500);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(225);

                    b.Property<string>("LandLocation")
                        .IsRequired();

                    b.Property<int?>("PaymentTypeId");

                    b.Property<int>("PersonTypeId");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(225);

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(15,2)");

                    b.HasKey("Id");

                    b.HasIndex("AnnounceTypeId");

                    b.HasIndex("AppUserId");

                    b.HasIndex("CityId");

                    b.HasIndex("PaymentTypeId");

                    b.HasIndex("PersonTypeId");

                    b.ToTable("Lands","real_estate");
                });

            modelBuilder.Entity("FirstRealProject.Models.Real_Estates.LandModels.LandPhoto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("LandId");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasMaxLength(225);

                    b.HasKey("Id");

                    b.HasIndex("LandId");

                    b.ToTable("LandPhotos","real_estate");
                });

            modelBuilder.Entity("FirstRealProject.Models.Real_Estates.OfficeModels.Office", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AnnounceAddedDate");

                    b.Property<bool>("AnnounceCheckIn");

                    b.Property<bool>("AnnounceEnded");

                    b.Property<DateTime?>("AnnounceEndedDate");

                    b.Property<string>("AnnounceName")
                        .IsRequired()
                        .HasMaxLength(225);

                    b.Property<string>("AnnouncePinCode")
                        .HasMaxLength(225);

                    b.Property<DateTime?>("AnnouncePublishDate");

                    b.Property<bool>("AnnouncePublished");

                    b.Property<int?>("AnnounceTypeId");

                    b.Property<string>("AnnounceUniqueCode")
                        .HasMaxLength(225);

                    b.Property<int>("AnnounceViewCount");

                    b.Property<string>("AppUserId");

                    b.Property<bool>("AppendedPinCode");

                    b.Property<int>("CityId");

                    b.Property<string>("Description")
                        .HasMaxLength(500);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(225);

                    b.Property<int>("OfficeArea");

                    b.Property<string>("OfficeLocation")
                        .IsRequired();

                    b.Property<int>("OfficeTypeId");

                    b.Property<int?>("PaymentTypeId");

                    b.Property<int>("PersonTypeId");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(225);

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(15,2)");

                    b.Property<int>("RSAnnounceTypeId");

                    b.HasKey("Id");

                    b.HasIndex("AnnounceTypeId");

                    b.HasIndex("AppUserId");

                    b.HasIndex("CityId");

                    b.HasIndex("OfficeTypeId");

                    b.HasIndex("PaymentTypeId");

                    b.HasIndex("PersonTypeId");

                    b.HasIndex("RSAnnounceTypeId");

                    b.ToTable("Offices","real_estate");
                });

            modelBuilder.Entity("FirstRealProject.Models.Real_Estates.OfficeModels.OfficePhoto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("OfficeId");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasMaxLength(225);

                    b.HasKey("Id");

                    b.HasIndex("OfficeId");

                    b.ToTable("OfficePhotos","real_estate");
                });

            modelBuilder.Entity("FirstRealProject.Models.Real_Estates.OfficeModels.OfficeType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(225);

                    b.HasKey("Id");

                    b.ToTable("OfficeTypes","real_estate");
                });

            modelBuilder.Entity("FirstRealProject.Models.Transports.AccessoryModels.Accessory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessoryTypeId");

                    b.Property<DateTime>("AnnounceAddedDate");

                    b.Property<bool>("AnnounceCheckIn");

                    b.Property<bool>("AnnounceEnded");

                    b.Property<DateTime?>("AnnounceEndedDate");

                    b.Property<string>("AnnounceName")
                        .IsRequired()
                        .HasMaxLength(225);

                    b.Property<string>("AnnouncePinCode")
                        .HasMaxLength(225);

                    b.Property<DateTime?>("AnnouncePublishDate");

                    b.Property<bool>("AnnouncePublished");

                    b.Property<int?>("AnnounceTypeId");

                    b.Property<string>("AnnounceUniqueCode")
                        .HasMaxLength(225);

                    b.Property<int>("AnnounceViewCount");

                    b.Property<string>("AppUserId");

                    b.Property<bool>("AppendedPinCode");

                    b.Property<int>("CityId");

                    b.Property<bool>("Condition");

                    b.Property<string>("Description")
                        .HasMaxLength(500);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(225);

                    b.Property<int?>("PaymentTypeId");

                    b.Property<int>("PersonTypeId");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(225);

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(15,2)");

                    b.HasKey("Id");

                    b.HasIndex("AccessoryTypeId");

                    b.HasIndex("AnnounceTypeId");

                    b.HasIndex("AppUserId");

                    b.HasIndex("CityId");

                    b.HasIndex("PaymentTypeId");

                    b.HasIndex("PersonTypeId");

                    b.ToTable("Accessories","transport");
                });

            modelBuilder.Entity("FirstRealProject.Models.Transports.AccessoryModels.AccessoryPhoto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessoryId");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasMaxLength(225);

                    b.HasKey("Id");

                    b.HasIndex("AccessoryId");

                    b.ToTable("AccessoryPhotos","transport");
                });

            modelBuilder.Entity("FirstRealProject.Models.Transports.AccessoryModels.AccessoryType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(225);

                    b.HasKey("Id");

                    b.ToTable("AccessoryTypes","transport");
                });

            modelBuilder.Entity("FirstRealProject.Models.Transports.BusModels.Bus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AnnounceAddedDate");

                    b.Property<bool>("AnnounceCheckIn");

                    b.Property<bool>("AnnounceEnded");

                    b.Property<DateTime?>("AnnounceEndedDate");

                    b.Property<string>("AnnounceName")
                        .IsRequired()
                        .HasMaxLength(225);

                    b.Property<string>("AnnouncePinCode")
                        .HasMaxLength(225);

                    b.Property<DateTime?>("AnnouncePublishDate");

                    b.Property<bool>("AnnouncePublished");

                    b.Property<int?>("AnnounceTypeId");

                    b.Property<string>("AnnounceUniqueCode")
                        .HasMaxLength(225);

                    b.Property<int>("AnnounceViewCount");

                    b.Property<string>("AppUserId");

                    b.Property<bool>("AppendedPinCode");

                    b.Property<int>("BusBodyTypeId");

                    b.Property<int>("BusKilometer");

                    b.Property<int>("BusMakeId");

                    b.Property<int>("BusYear");

                    b.Property<int>("CityId");

                    b.Property<bool>("Condition");

                    b.Property<bool>("ConditionBarter");

                    b.Property<bool>("ConditionCredit");

                    b.Property<string>("Description")
                        .HasMaxLength(500);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(225);

                    b.Property<int?>("PaymentTypeId");

                    b.Property<int>("PersonTypeId");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(225);

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(15,2)");

                    b.HasKey("Id");

                    b.HasIndex("AnnounceTypeId");

                    b.HasIndex("AppUserId");

                    b.HasIndex("BusBodyTypeId");

                    b.HasIndex("BusMakeId");

                    b.HasIndex("CityId");

                    b.HasIndex("PaymentTypeId");

                    b.HasIndex("PersonTypeId");

                    b.ToTable("Buses","transport");
                });

            modelBuilder.Entity("FirstRealProject.Models.Transports.BusModels.BusBodyType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("BusBodyTypes","transport");
                });

            modelBuilder.Entity("FirstRealProject.Models.Transports.BusModels.BusMake", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(225);

                    b.HasKey("Id");

                    b.ToTable("BusMakes","transport");
                });

            modelBuilder.Entity("FirstRealProject.Models.Transports.BusModels.BusPhoto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BusId");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasMaxLength(225);

                    b.HasKey("Id");

                    b.HasIndex("BusId");

                    b.ToTable("BusPhotos","transport");
                });

            modelBuilder.Entity("FirstRealProject.Models.Transports.CarModels.AutoEquipment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(225);

                    b.HasKey("Id");

                    b.ToTable("AutoEquipments","transport");
                });

            modelBuilder.Entity("FirstRealProject.Models.Transports.CarModels.Car", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AnnounceAddedDate");

                    b.Property<bool>("AnnounceCheckIn");

                    b.Property<bool>("AnnounceEnded");

                    b.Property<DateTime?>("AnnounceEndedDate");

                    b.Property<string>("AnnounceName")
                        .IsRequired()
                        .HasMaxLength(225);

                    b.Property<string>("AnnouncePinCode")
                        .HasMaxLength(225);

                    b.Property<DateTime?>("AnnouncePublishDate");

                    b.Property<bool>("AnnouncePublished");

                    b.Property<int?>("AnnounceTypeId");

                    b.Property<string>("AnnounceUniqueCode")
                        .HasMaxLength(225)
                        .IsUnicode(true);

                    b.Property<int>("AnnounceViewCount");

                    b.Property<string>("AppUserId");

                    b.Property<bool>("AppendedPinCode");

                    b.Property<int>("CarBodyTypeId");

                    b.Property<int>("CarKilometer");

                    b.Property<int>("CarModelId");

                    b.Property<int>("CarMotor");

                    b.Property<int>("CarMotorStrength");

                    b.Property<int>("CarYear");

                    b.Property<int>("CityId");

                    b.Property<string>("Color")
                        .IsRequired();

                    b.Property<bool>("Condition");

                    b.Property<bool>("ConditionBarter");

                    b.Property<bool>("ConditionCredit");

                    b.Property<string>("Description")
                        .HasMaxLength(500);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(225);

                    b.Property<int>("FuelTypeId");

                    b.Property<int?>("PaymentTypeId");

                    b.Property<int>("PersonTypeId");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(225);

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(15,2)");

                    b.Property<int>("SpeedBoxId");

                    b.Property<int>("TransmissionId");

                    b.HasKey("Id");

                    b.HasIndex("AnnounceName");

                    b.HasIndex("AnnounceTypeId");

                    b.HasIndex("AppUserId");

                    b.HasIndex("CarBodyTypeId");

                    b.HasIndex("CarModelId");

                    b.HasIndex("CarYear");

                    b.HasIndex("CityId");

                    b.HasIndex("FuelTypeId");

                    b.HasIndex("PaymentTypeId");

                    b.HasIndex("PersonTypeId");

                    b.HasIndex("Price");

                    b.HasIndex("SpeedBoxId");

                    b.HasIndex("TransmissionId");

                    b.ToTable("Cars","transport");
                });

            modelBuilder.Entity("FirstRealProject.Models.Transports.CarModels.CarAutoEquipment", b =>
                {
                    b.Property<int>("CarId");

                    b.Property<int>("AutoEquipmentId");

                    b.HasKey("CarId", "AutoEquipmentId");

                    b.HasIndex("AutoEquipmentId");

                    b.ToTable("CarAutoEquipments","transport");
                });

            modelBuilder.Entity("FirstRealProject.Models.Transports.CarModels.CarBodyType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(225);

                    b.HasKey("Id");

                    b.ToTable("CarBodyTypes","transport");
                });

            modelBuilder.Entity("FirstRealProject.Models.Transports.CarModels.CarMake", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(225);

                    b.HasKey("Id");

                    b.ToTable("CarMakes","transport");
                });

            modelBuilder.Entity("FirstRealProject.Models.Transports.CarModels.CarModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CarMakeId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(225);

                    b.HasKey("Id");

                    b.HasIndex("CarMakeId");

                    b.ToTable("CarModels","transport");
                });

            modelBuilder.Entity("FirstRealProject.Models.Transports.CarModels.CarPhoto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CarId");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasMaxLength(225);

                    b.HasKey("Id");

                    b.HasIndex("CarId");

                    b.ToTable("CarPhotos","transport");
                });

            modelBuilder.Entity("FirstRealProject.Models.Transports.CarModels.FuelType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(225);

                    b.HasKey("Id");

                    b.ToTable("FuelTypes","transport");
                });

            modelBuilder.Entity("FirstRealProject.Models.Transports.CarModels.SpeedBox", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(225);

                    b.HasKey("Id");

                    b.ToTable("SpeedBoxes","transport");
                });

            modelBuilder.Entity("FirstRealProject.Models.Transports.CarModels.Transmission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(225);

                    b.HasKey("Id");

                    b.ToTable("Transmissions","transport");
                });

            modelBuilder.Entity("FirstRealProject.Models.Transports.MotocycleModels.Motocycle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AnnounceAddedDate");

                    b.Property<bool>("AnnounceCheckIn");

                    b.Property<bool>("AnnounceEnded");

                    b.Property<DateTime?>("AnnounceEndedDate");

                    b.Property<string>("AnnounceName")
                        .IsRequired()
                        .HasMaxLength(225);

                    b.Property<string>("AnnouncePinCode")
                        .HasMaxLength(225);

                    b.Property<DateTime?>("AnnouncePublishDate");

                    b.Property<bool>("AnnouncePublished");

                    b.Property<int?>("AnnounceTypeId");

                    b.Property<string>("AnnounceUniqueCode")
                        .HasMaxLength(225);

                    b.Property<int>("AnnounceViewCount");

                    b.Property<string>("AppUserId");

                    b.Property<bool>("AppendedPinCode");

                    b.Property<int>("CityId");

                    b.Property<bool>("Condition");

                    b.Property<bool>("ConditionBarter");

                    b.Property<bool>("ConditionCredit");

                    b.Property<string>("Description")
                        .HasMaxLength(500);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(225);

                    b.Property<int>("MotocycleBodyTypeId");

                    b.Property<int>("MotocycleKilometer");

                    b.Property<int>("MotocycleMakeId");

                    b.Property<string>("MotocycleModel")
                        .IsRequired();

                    b.Property<int>("MotocycleMotor");

                    b.Property<int>("MotocycleYear");

                    b.Property<int?>("PaymentTypeId");

                    b.Property<int>("PersonTypeId");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(225);

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(15,2)");

                    b.HasKey("Id");

                    b.HasIndex("AnnounceTypeId");

                    b.HasIndex("AppUserId");

                    b.HasIndex("CityId");

                    b.HasIndex("MotocycleBodyTypeId");

                    b.HasIndex("MotocycleMakeId");

                    b.HasIndex("PaymentTypeId");

                    b.HasIndex("PersonTypeId");

                    b.ToTable("Motocycle","transport");
                });

            modelBuilder.Entity("FirstRealProject.Models.Transports.MotocycleModels.MotocycleBodyType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("MotocycleBodyTypes","transport");
                });

            modelBuilder.Entity("FirstRealProject.Models.Transports.MotocycleModels.MotocycleMake", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(225);

                    b.HasKey("Id");

                    b.ToTable("MotocycleMakes","transport");
                });

            modelBuilder.Entity("FirstRealProject.Models.Transports.MotocycleModels.MotocyclePhoto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("MotocycleId");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasMaxLength(225);

                    b.HasKey("Id");

                    b.HasIndex("MotocycleId");

                    b.ToTable("MotocyclePhotos","transport");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("FirstRealProject.Models.Jobs.ForBusinessModels.BusinessEPhoto", b =>
                {
                    b.HasOne("FirstRealProject.Models.Jobs.ForBusinessModels.BusinessEquipment", "BusinessEquipment")
                        .WithMany("BusinessEPhotos")
                        .HasForeignKey("BusinessEquipmentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FirstRealProject.Models.Jobs.ForBusinessModels.BusinessEquipment", b =>
                {
                    b.HasOne("FirstRealProject.Models.Commons.AnnounceType", "AnnounceType")
                        .WithMany()
                        .HasForeignKey("AnnounceTypeId");

                    b.HasOne("FirstRealProject.Models.Accounts.AppUser", "AppUser")
                        .WithMany("BusinessEquipments")
                        .HasForeignKey("AppUserId");

                    b.HasOne("FirstRealProject.Models.Jobs.ForBusinessModels.BusinessType", "BusinessType")
                        .WithMany()
                        .HasForeignKey("BusinessTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FirstRealProject.Models.PagesModels.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FirstRealProject.Models.Commons.PaymentType", "PaymentType")
                        .WithMany()
                        .HasForeignKey("PaymentTypeId");

                    b.HasOne("FirstRealProject.Models.Commons.PersonType", "PersonType")
                        .WithMany()
                        .HasForeignKey("PersonTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FirstRealProject.Models.Jobs.ForFoodModels.Food", b =>
                {
                    b.HasOne("FirstRealProject.Models.Commons.AnnounceType", "AnnounceType")
                        .WithMany()
                        .HasForeignKey("AnnounceTypeId");

                    b.HasOne("FirstRealProject.Models.Accounts.AppUser", "AppUser")
                        .WithMany("Foods")
                        .HasForeignKey("AppUserId");

                    b.HasOne("FirstRealProject.Models.PagesModels.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FirstRealProject.Models.Commons.PaymentType", "PaymentType")
                        .WithMany()
                        .HasForeignKey("PaymentTypeId");

                    b.HasOne("FirstRealProject.Models.Commons.PersonType", "PersonType")
                        .WithMany()
                        .HasForeignKey("PersonTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FirstRealProject.Models.Jobs.ForFoodModels.FoodPhoto", b =>
                {
                    b.HasOne("FirstRealProject.Models.Jobs.ForFoodModels.Food", "Food")
                        .WithMany("FoodPhotos")
                        .HasForeignKey("FoodId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FirstRealProject.Models.Jobs.ForJob.Job", b =>
                {
                    b.HasOne("FirstRealProject.Models.Jobs.ForJob.ActivityArea", "ActivityArea")
                        .WithMany()
                        .HasForeignKey("ActivityAreaId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FirstRealProject.Models.Commons.AnnounceType", "AnnounceType")
                        .WithMany()
                        .HasForeignKey("AnnounceTypeId");

                    b.HasOne("FirstRealProject.Models.Accounts.AppUser", "AppUser")
                        .WithMany("Jobs")
                        .HasForeignKey("AppUserId");

                    b.HasOne("FirstRealProject.Models.PagesModels.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FirstRealProject.Models.Jobs.ForJob.JobType", "JobType")
                        .WithMany()
                        .HasForeignKey("JobTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FirstRealProject.Models.Commons.PaymentType", "PaymentType")
                        .WithMany()
                        .HasForeignKey("PaymentTypeId");

                    b.HasOne("FirstRealProject.Models.Commons.PersonType", "PersonType")
                        .WithMany()
                        .HasForeignKey("PersonTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FirstRealProject.Models.Jobs.ForJobModels.JobPhoto", b =>
                {
                    b.HasOne("FirstRealProject.Models.Jobs.ForJob.Job", "Job")
                        .WithMany("JobPhotos")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FirstRealProject.Models.PagesModels.Category", b =>
                {
                    b.HasOne("FirstRealProject.Models.PagesModels.BasicMenu", "BasicMenu")
                        .WithMany("Categories")
                        .HasForeignKey("BasicMenuId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FirstRealProject.Models.Real_Estates.ApartmentModels.Apartment", b =>
                {
                    b.HasOne("FirstRealProject.Models.Commons.AnnounceType", "AnnounceType")
                        .WithMany()
                        .HasForeignKey("AnnounceTypeId");

                    b.HasOne("FirstRealProject.Models.Real_Estates.ApartmentModels.ApartmentType", "ApartmentType")
                        .WithMany()
                        .HasForeignKey("ApartmentTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FirstRealProject.Models.Accounts.AppUser", "AppUser")
                        .WithMany("Apartments")
                        .HasForeignKey("AppUserId");

                    b.HasOne("FirstRealProject.Models.PagesModels.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FirstRealProject.Models.Commons.PaymentType", "PaymentType")
                        .WithMany()
                        .HasForeignKey("PaymentTypeId");

                    b.HasOne("FirstRealProject.Models.Commons.PersonType", "PersonType")
                        .WithMany()
                        .HasForeignKey("PersonTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FirstRealProject.Models.Real_Estates.Commons.RSAnnounceType", "RSAnnounceType")
                        .WithMany()
                        .HasForeignKey("RSAnnounceTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FirstRealProject.Models.Real_Estates.ApartmentModels.ApartmentPhoto", b =>
                {
                    b.HasOne("FirstRealProject.Models.Real_Estates.ApartmentModels.Apartment", "Apartment")
                        .WithMany("ApartmentPhotos")
                        .HasForeignKey("ApartmentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FirstRealProject.Models.Real_Estates.GarageModels.Garage", b =>
                {
                    b.HasOne("FirstRealProject.Models.Commons.AnnounceType", "AnnounceType")
                        .WithMany()
                        .HasForeignKey("AnnounceTypeId");

                    b.HasOne("FirstRealProject.Models.Accounts.AppUser", "AppUser")
                        .WithMany("Garages")
                        .HasForeignKey("AppUserId");

                    b.HasOne("FirstRealProject.Models.PagesModels.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FirstRealProject.Models.Commons.PaymentType", "PaymentType")
                        .WithMany()
                        .HasForeignKey("PaymentTypeId");

                    b.HasOne("FirstRealProject.Models.Commons.PersonType", "PersonType")
                        .WithMany()
                        .HasForeignKey("PersonTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FirstRealProject.Models.Real_Estates.GarageModels.GaragePhoto", b =>
                {
                    b.HasOne("FirstRealProject.Models.Real_Estates.GarageModels.Garage", "Garage")
                        .WithMany("GaragePhotos")
                        .HasForeignKey("GarageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FirstRealProject.Models.Real_Estates.HouseModels.House", b =>
                {
                    b.HasOne("FirstRealProject.Models.Commons.AnnounceType", "AnnounceType")
                        .WithMany()
                        .HasForeignKey("AnnounceTypeId");

                    b.HasOne("FirstRealProject.Models.Accounts.AppUser", "AppUser")
                        .WithMany("Houses")
                        .HasForeignKey("AppUserId");

                    b.HasOne("FirstRealProject.Models.PagesModels.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FirstRealProject.Models.Real_Estates.HouseModels.HouseType", "HouseType")
                        .WithMany()
                        .HasForeignKey("HouseTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FirstRealProject.Models.Commons.PaymentType", "PaymentType")
                        .WithMany()
                        .HasForeignKey("PaymentTypeId");

                    b.HasOne("FirstRealProject.Models.Commons.PersonType", "PersonType")
                        .WithMany()
                        .HasForeignKey("PersonTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FirstRealProject.Models.Real_Estates.Commons.RSAnnounceType", "RSAnnounceType")
                        .WithMany()
                        .HasForeignKey("RSAnnounceTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FirstRealProject.Models.Real_Estates.HouseModels.HousePhoto", b =>
                {
                    b.HasOne("FirstRealProject.Models.Real_Estates.HouseModels.House", "House")
                        .WithMany("HousePhotos")
                        .HasForeignKey("HouseId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FirstRealProject.Models.Real_Estates.LandModels.Land", b =>
                {
                    b.HasOne("FirstRealProject.Models.Commons.AnnounceType", "AnnounceType")
                        .WithMany()
                        .HasForeignKey("AnnounceTypeId");

                    b.HasOne("FirstRealProject.Models.Accounts.AppUser", "AppUser")
                        .WithMany("Lands")
                        .HasForeignKey("AppUserId");

                    b.HasOne("FirstRealProject.Models.PagesModels.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FirstRealProject.Models.Commons.PaymentType", "PaymentType")
                        .WithMany()
                        .HasForeignKey("PaymentTypeId");

                    b.HasOne("FirstRealProject.Models.Commons.PersonType", "PersonType")
                        .WithMany()
                        .HasForeignKey("PersonTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FirstRealProject.Models.Real_Estates.LandModels.LandPhoto", b =>
                {
                    b.HasOne("FirstRealProject.Models.Real_Estates.LandModels.Land", "Land")
                        .WithMany("LandPhotos")
                        .HasForeignKey("LandId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FirstRealProject.Models.Real_Estates.OfficeModels.Office", b =>
                {
                    b.HasOne("FirstRealProject.Models.Commons.AnnounceType", "AnnounceType")
                        .WithMany()
                        .HasForeignKey("AnnounceTypeId");

                    b.HasOne("FirstRealProject.Models.Accounts.AppUser", "AppUser")
                        .WithMany("Offices")
                        .HasForeignKey("AppUserId");

                    b.HasOne("FirstRealProject.Models.PagesModels.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FirstRealProject.Models.Real_Estates.OfficeModels.OfficeType", "OfficeType")
                        .WithMany()
                        .HasForeignKey("OfficeTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FirstRealProject.Models.Commons.PaymentType", "PaymentType")
                        .WithMany()
                        .HasForeignKey("PaymentTypeId");

                    b.HasOne("FirstRealProject.Models.Commons.PersonType", "PersonType")
                        .WithMany()
                        .HasForeignKey("PersonTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FirstRealProject.Models.Real_Estates.Commons.RSAnnounceType", "RSAnnounceType")
                        .WithMany()
                        .HasForeignKey("RSAnnounceTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FirstRealProject.Models.Real_Estates.OfficeModels.OfficePhoto", b =>
                {
                    b.HasOne("FirstRealProject.Models.Real_Estates.OfficeModels.Office", "Office")
                        .WithMany("OfficePhotos")
                        .HasForeignKey("OfficeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FirstRealProject.Models.Transports.AccessoryModels.Accessory", b =>
                {
                    b.HasOne("FirstRealProject.Models.Transports.AccessoryModels.AccessoryType", "AccessoryType")
                        .WithMany()
                        .HasForeignKey("AccessoryTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FirstRealProject.Models.Commons.AnnounceType", "AnnounceType")
                        .WithMany()
                        .HasForeignKey("AnnounceTypeId");

                    b.HasOne("FirstRealProject.Models.Accounts.AppUser", "AppUser")
                        .WithMany("Accessories")
                        .HasForeignKey("AppUserId");

                    b.HasOne("FirstRealProject.Models.PagesModels.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FirstRealProject.Models.Commons.PaymentType", "PaymentType")
                        .WithMany()
                        .HasForeignKey("PaymentTypeId");

                    b.HasOne("FirstRealProject.Models.Commons.PersonType", "PersonType")
                        .WithMany()
                        .HasForeignKey("PersonTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FirstRealProject.Models.Transports.AccessoryModels.AccessoryPhoto", b =>
                {
                    b.HasOne("FirstRealProject.Models.Transports.AccessoryModels.Accessory", "Accessory")
                        .WithMany("AccessoryPhotos")
                        .HasForeignKey("AccessoryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FirstRealProject.Models.Transports.BusModels.Bus", b =>
                {
                    b.HasOne("FirstRealProject.Models.Commons.AnnounceType", "AnnounceType")
                        .WithMany()
                        .HasForeignKey("AnnounceTypeId");

                    b.HasOne("FirstRealProject.Models.Accounts.AppUser", "AppUser")
                        .WithMany("Buses")
                        .HasForeignKey("AppUserId");

                    b.HasOne("FirstRealProject.Models.Transports.BusModels.BusBodyType", "BusBodyType")
                        .WithMany()
                        .HasForeignKey("BusBodyTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FirstRealProject.Models.Transports.BusModels.BusMake", "BusMake")
                        .WithMany()
                        .HasForeignKey("BusMakeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FirstRealProject.Models.PagesModels.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FirstRealProject.Models.Commons.PaymentType", "PaymentType")
                        .WithMany()
                        .HasForeignKey("PaymentTypeId");

                    b.HasOne("FirstRealProject.Models.Commons.PersonType", "PersonType")
                        .WithMany()
                        .HasForeignKey("PersonTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FirstRealProject.Models.Transports.BusModels.BusPhoto", b =>
                {
                    b.HasOne("FirstRealProject.Models.Transports.BusModels.Bus", "Bus")
                        .WithMany("BusPhotos")
                        .HasForeignKey("BusId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FirstRealProject.Models.Transports.CarModels.Car", b =>
                {
                    b.HasOne("FirstRealProject.Models.Commons.AnnounceType", "AnnounceType")
                        .WithMany()
                        .HasForeignKey("AnnounceTypeId");

                    b.HasOne("FirstRealProject.Models.Accounts.AppUser", "AppUser")
                        .WithMany("Cars")
                        .HasForeignKey("AppUserId");

                    b.HasOne("FirstRealProject.Models.Transports.CarModels.CarBodyType", "CarBodyType")
                        .WithMany()
                        .HasForeignKey("CarBodyTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FirstRealProject.Models.Transports.CarModels.CarModel", "CarModel")
                        .WithMany()
                        .HasForeignKey("CarModelId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FirstRealProject.Models.PagesModels.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FirstRealProject.Models.Transports.CarModels.FuelType", "FuelType")
                        .WithMany()
                        .HasForeignKey("FuelTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FirstRealProject.Models.Commons.PaymentType", "PaymentType")
                        .WithMany()
                        .HasForeignKey("PaymentTypeId");

                    b.HasOne("FirstRealProject.Models.Commons.PersonType", "PersonType")
                        .WithMany()
                        .HasForeignKey("PersonTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FirstRealProject.Models.Transports.CarModels.SpeedBox", "SpeedBox")
                        .WithMany()
                        .HasForeignKey("SpeedBoxId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FirstRealProject.Models.Transports.CarModels.Transmission", "Transmission")
                        .WithMany()
                        .HasForeignKey("TransmissionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FirstRealProject.Models.Transports.CarModels.CarAutoEquipment", b =>
                {
                    b.HasOne("FirstRealProject.Models.Transports.CarModels.AutoEquipment", "AutoEquipment")
                        .WithMany("CarAutoEquipments")
                        .HasForeignKey("AutoEquipmentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FirstRealProject.Models.Transports.CarModels.Car", "Car")
                        .WithMany("CarAutoEquipments")
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FirstRealProject.Models.Transports.CarModels.CarModel", b =>
                {
                    b.HasOne("FirstRealProject.Models.Transports.CarModels.CarMake", "CarMake")
                        .WithMany("CarModels")
                        .HasForeignKey("CarMakeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FirstRealProject.Models.Transports.CarModels.CarPhoto", b =>
                {
                    b.HasOne("FirstRealProject.Models.Transports.CarModels.Car", "Car")
                        .WithMany("CarPhotos")
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FirstRealProject.Models.Transports.MotocycleModels.Motocycle", b =>
                {
                    b.HasOne("FirstRealProject.Models.Commons.AnnounceType", "AnnounceType")
                        .WithMany()
                        .HasForeignKey("AnnounceTypeId");

                    b.HasOne("FirstRealProject.Models.Accounts.AppUser", "AppUser")
                        .WithMany("Motocycles")
                        .HasForeignKey("AppUserId");

                    b.HasOne("FirstRealProject.Models.PagesModels.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FirstRealProject.Models.Transports.MotocycleModels.MotocycleBodyType", "MotocycleBodyType")
                        .WithMany()
                        .HasForeignKey("MotocycleBodyTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FirstRealProject.Models.Transports.MotocycleModels.MotocycleMake", "MotocycleMake")
                        .WithMany()
                        .HasForeignKey("MotocycleMakeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FirstRealProject.Models.Commons.PaymentType", "PaymentType")
                        .WithMany()
                        .HasForeignKey("PaymentTypeId");

                    b.HasOne("FirstRealProject.Models.Commons.PersonType", "PersonType")
                        .WithMany()
                        .HasForeignKey("PersonTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FirstRealProject.Models.Transports.MotocycleModels.MotocyclePhoto", b =>
                {
                    b.HasOne("FirstRealProject.Models.Transports.MotocycleModels.Motocycle", "Motocycle")
                        .WithMany("MotocyclePhotos")
                        .HasForeignKey("MotocycleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("FirstRealProject.Models.Accounts.AppRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("FirstRealProject.Models.Accounts.AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("FirstRealProject.Models.Accounts.AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("FirstRealProject.Models.Accounts.AppRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FirstRealProject.Models.Accounts.AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("FirstRealProject.Models.Accounts.AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
